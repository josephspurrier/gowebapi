{
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API for the application.\n\nSwagger 2.0 Spec - generated by [go-swagger](https://github.com/go-swagger/go-swagger)",
    "title": "Web API",
    "version": "2.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/v1": {
      "get": {
        "tags": [
          "root"
        ],
        "summary": "Display a hello message.",
        "operationId": "RootIndex",
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          }
        }
      }
    },
    "/v1/auth": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get an access token.",
        "operationId": "AuthIndex",
        "responses": {
          "200": {
            "$ref": "#/responses/AuthIndexResponse"
          }
        }
      }
    },
    "/v1/user": {
      "get": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Return all users.",
        "operationId": "UserIndex",
        "responses": {
          "200": {
            "$ref": "#/responses/UserIndexResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "post": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Create a user.",
        "operationId": "UserCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FirstName",
            "name": "first_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "LastName",
            "name": "last_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Email",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Password",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/CreatedResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete all users.",
        "operationId": "UserDestroyAll",
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/v1/user/{user_id}": {
      "get": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Return one user.",
        "operationId": "UserShow",
        "parameters": [
          {
            "type": "string",
            "x-example": "USERID",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserShowResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Make changes to a user.",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "type": "string",
            "x-example": "USERID",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "FirstName",
            "name": "first_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "LastName",
            "name": "last_name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Email",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Password",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      },
      "delete": {
        "security": [
          {
            "token": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete a user.",
        "operationId": "UserDestroy",
        "parameters": [
          {
            "type": "string",
            "x-example": "USERID",
            "x-go-name": "UserID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OKResponse"
          },
          "400": {
            "$ref": "#/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/responses/InternalServerErrorResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "title": "User is a user of the system.",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "status_id": {
          "type": "integer",
          "format": "uint8",
          "x-go-name": "StatusID"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "app/webapi/store"
    },
    "UserGroup": {
      "type": "array",
      "title": "UserGroup represents a group of users.",
      "items": {
        "$ref": "#/definitions/User"
      },
      "x-go-package": "app/webapi/store"
    }
  },
  "responses": {
    "AuthIndexResponse": {
      "description": "Response returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "string",
                "x-go-name": "Token"
              }
            },
            "x-go-name": "Data"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "BadRequestResponse": {
      "description": "BadRequestResponse returns 400.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "CreatedResponse": {
      "description": "CreatedResponse returns 201.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "record_id": {
            "description": "RecordID can be used for returning the ID from a row.",
            "type": "string",
            "x-go-name": "RecordID"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "InternalServerErrorResponse": {
      "description": "InternalServerErrorResponse returns 500.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "OKResponse": {
      "description": "OKResponse returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "UnauthorizedResponse": {
      "description": "UnauthorizedResponse returns 401.",
      "schema": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "message": {
            "description": "Message can contain a user friendly message.",
            "type": "string",
            "x-go-name": "Message"
          },
          "status": {
            "description": "Status contains the string of the HTTP status.",
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "UserIndexResponse": {
      "description": "Response returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/UserGroup"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "UserShowResponse": {
      "description": "Response returns 200.",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            },
            "x-go-name": "Data"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "description": "The following syntax must be used in the Authorization header: Bearer TOKEN",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
